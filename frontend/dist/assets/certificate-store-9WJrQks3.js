import{a0 as y,g as s,G as c}from"./index-DPGnjrLh.js";const v=y("certificate",()=>{const a=s([]),i=s(!1),o=s(null);async function f(t=!1,e){if(!(i.value&&!t))try{const r=await c.get(`/api/users/${e}/certificates`);r.data&&(a.value=r.data.certificates,console.log("Fetched certificates: ",a.value),i.value=!0)}catch(r){console.error("Error fetching certificate:",r)}}async function u(t){try{const e=await c.post("/api/certificates/request-issue-certificate",{user_id:t});if(console.log("response request issue certificate: ",e.data),e.data)return e.data}catch(e){console.error("Error requesting issue certificate:",e)}}async function d(t){try{const e=await c.post("/api/certificates/request-extend-certificate",{certificate_id:t});if(console.log("response request extend certificate: ",e.data),e.data)return e.data}catch(e){console.error("Error requesting extend certificate:",e)}}async function l(t,e){try{const r=await c.post("/api/certificates/change-certificate-status",{certificate_id:t,status:e});if(console.log("response change certificate status: ",r.data),r.data){const n=a.value.findIndex(h=>h.id===t);return n!==-1&&(a.value[n].status=e),r.data}}catch(r){console.error("Error changing certificate status:",r)}}async function p(t){try{const e=await c.get(`api/document-certificate-id/${t}`);return e.data?(console.log("Certificate found:",e.data.certificate),o.value=e.data,e.data.certificate):(console.warn("No certificate found with code:",code),null)}catch(e){throw console.error("Error fetching certificate by code:",e),e}}function g(){a.value=[],i.value=!1}return{certificates:a,fetchCertificates:f,currentCertificate:o,findCertificateByDocumentId:p,requestIssueCertificate:u,requestExtendCertificate:d,changeCertificateStatus:l,resetCertificates:g}});export{v as u};
